#version 460

vec3 hsv2rgb(vec3 c);
vec2 cplxSquare(vec2 Z);
vec4 logColour(float maxiter, float iter, float smoothIter);
vec4 linearColour(float maxiter, float iter, float smoothIter);


uniform vec2 seed; // IGNORED, 
uniform uvec2 resolution;
uniform bool blackoutInterior = true; // Should the interior of the mandlebrot set be filled in blacK?
uniform bool useLogScale = false;
uniform vec2 llWindowPos = vec2(-2., -2.); // Position of lower left corner of window on cplx plane
uniform vec2 windowSize = vec2(4., 4.);

layout (binding = 0, rgba32f) uniform writeonly image2D destTex;
layout (local_size_x = 16, local_size_y = 16) in;
void main() {
    float MAX_ITER = 50.;
    if (useLogScale){
        MAX_ITER = 5000.; // 10000.
    }

    ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);
    
    if(storePos.x > resolution.x || storePos.y > resolution.y){ return; }

    float bound = 20.;


    vec2 Z = vec2(storePos) / resolution; // [0, 1)
    Z = Z * windowSize + llWindowPos; 

    vec2 C = Z;

    float i;
    for(i = 0.; i < MAX_ITER && length(Z) < bound; i++){
        Z = cplxSquare(Z);
        Z += C;

    }
    float smoothDwell = i + 1 - log2(log(length(Z)));
    
    if(i+0.01 > MAX_ITER && blackoutInterior){
        imageStore(destTex, storePos, vec4(vec3(0.), 1.));
    }else{
        
        if(useLogScale){
            imageStore(destTex, storePos, logColour(MAX_ITER, i, smoothDwell));
        }else{
            imageStore(destTex, storePos, linearColour(MAX_ITER, i, smoothDwell));
        }
        
    }

}

// General notes on colour: Smooth dwell controls hue, iteration count controls saturation
// Logarithmic scale applied to hue and saturation values increases contrast for low iteration values, and allows us to squeeze in higher values
const float MIN_DWELL = 0.0000001; // Should be >0. Lower values have narrower colour bands. 
vec4 logColour(float maxiter, float iter, float smoothIter)
{
    maxiter = 1 / log(maxiter + MIN_DWELL); // saves recipricoal of log to avoid repeat computations
    iter = (log(iter+ MIN_DWELL) * maxiter ) * 0.5 + 0.5;
    smoothIter = log(smoothIter+ MIN_DWELL) * maxiter;
    return vec4(hsv2rgb(vec3(smoothIter, iter, 1.)), 1.);
}

// Linear scale emphasizes high 
vec4 linearColour(float maxiter, float iter, float smoothIter)
{
    maxiter = 1/maxiter; // saves recipricoal to avoid two divides
    iter = iter*maxiter * 0.5 + 0.5;
    smoothIter = smoothIter * maxiter;
    return vec4(hsv2rgb(vec3(smoothIter, iter, 1.)), 1.);
}

// All components are in the range [0â€¦1], including hue.
vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

vec2 cplxSquare(vec2 Z)
{
    float temp = Z.y;
    Z.y = 2. * Z.y * Z.x;
    Z.x = Z.x * Z.x - temp*temp;
    return Z;
}
